import React, { useState } from 'react';
import { Modal, View, Text, TextInput, TouchableOpacity, Alert } from 'xxx';
import styles from './DetailsPedidoModal.styles'; // Usamos el archivo .styles.ts

interface DetailsPedidoModalProps {
  visible: boolean;
  onClose: () => void;
  detalles: any[];
  cliente: { nomcli: string; nruc: string }; // Información del cliente
}

const DetailsPedidoModal: React.FC<DetailsPedidoModalProps> = ({ visible, onClose, detalles, cliente }) => {
  const [printerIP, setPrinterIP] = useState(''); // Estado para la IP de la impresora
  const [isPrinting, setIsPrinting] = useState(false); // Estado para controlar el estado del botón de impresión

  // Función para formatear los detalles del pedido
  const formatPrintData = () => {
    let printData = `Pedido para: ${cliente.nomcli}\nRUC: ${cliente.nruc}\n\n`;
    printData += 'Item   | Código   | Descripción          | Cantidad  | Precio\n';
    printData += '-------------------------------------------------------------\n';

    detalles.forEach((item) => {
      printData += `${item.item}   | ${item.codprod}   | ${item.descrip}   | ${item.cantped}   | ${item.precio}\n`;
    });

    return printData;
  };

  // Función para manejar la impresión
  const handlePrint = async () => {
    if (!printerIP) {
      Alert.alert('Error', 'Por favor, introduce la dirección IP de la impresora.');
      return;
    }
  
    const printData = formatPrintData();

    // Establecer el estado a "imprimiendo"
    setIsPrinting(true);

    try {
      const response = await fetch(`http://${printerIP}:9100`, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain' },
        body: printData, // Enviamos los datos formateados a la impresora
      });
  
      if (response.ok) {
        Alert.alert('Éxito', `Datos enviados a la impresora en ${printerIP}`);
      } else {
        Alert.alert('Error', `No se pudo imprimir: ${response.statusText}`);
      }
    } catch (error) {
      // Aquí hacemos un 'type assertion' para tratar el error como un objeto de tipo 'Error'
      const err = error as Error; 
      Alert.alert('Error', `No se pudo conectar con la impresora: ${err.message}`);
    } finally {
      // Establecer el estado a "no imprimiendo" después de la respuesta
      setIsPrinting(false);
    }
  };

  return (
    <Modal visible={visible} onRequestClose={onClose} animationType="slide">
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>Detalles del Pedido</Text>

          {/* Información del cliente */}
          <View style={styles.clientInfo}>
            <Text style={styles.clientText}>
              Cliente: <Text style={styles.clientHighlight}>{cliente.nomcli}</Text>
            </Text>
            <Text style={styles.clientText}>
              RUC: <Text style={styles.clientHighlight}>{cliente.nruc}</Text>
            </Text>
          </View>

          {/* Tabla de detalles */}
          {detalles.length > 0 ? (
            <View style={styles.tableContainer}>
              <View style={styles.tableHeader}>
                <Text style={styles.tableHeaderText}>Item</Text>
                <Text style={styles.tableHeaderText}>Código</Text>
                <Text style={styles.tableHeaderText}>Descripción</Text>
                <Text style={styles.tableHeaderText}>Cantidad</Text>
                <Text style={styles.tableHeaderText}>Precio</Text>
              </View>
              {detalles.map((item, index) => (
                <View key={index} style={styles.tableRow}>
                  <Text style={styles.tableText}>{item.item}</Text>
                  <Text style={styles.tableText}>{item.codprod}</Text>
                  <Text style={styles.tableText}>{item.descrip}</Text>
                  <Text style={styles.tableText}>{item.cantped}</Text>
                  <Text style={styles.tableText}>{item.precio}</Text>
                </View>
              ))}
            </View>
          ) : (
            <Text style={styles.noDetailsText}>No se encontraron detalles.</Text>
          )}

          {/* Entrada para la IP de la impresora */}
          <View style={styles.inputContainer}>
            <Text style={styles.inputLabel}>Dirección IP de la impresora:</Text>
            <TextInput
              style={styles.input}
              placeholder="Ej: 192.168.1.100"
              value={printerIP}
              onChangeText={setPrinterIP}
              keyboardType="numeric"
            />
          </View>

          {/* Botón de impresión deshabilitado si está imprimiendo */}
          <TouchableOpacity
            style={[styles.printButton, isPrinting && { backgroundColor: 'gray' }]} // Cambiar color si está imprimiendo
            onPress={handlePrint}
            disabled={isPrinting} // Deshabilitar el botón si está imprimiendo
          >
            <Text style={styles.printButtonText}>
              {isPrinting ? 'Imprimiendo...' : 'Imprimir'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>Cerrar</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

export default DetailsPedidoModal;
