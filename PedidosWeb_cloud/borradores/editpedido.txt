import React, { useState, useEffect } from 'react';
import { View, Modal, Text, TouchableOpacity, FlatList } from 'xxx';
import styles from './EditPedidoModal.styles';
import ClientSelectModal from './ClientSelectModal'; // Importa el modal ClientSelectModal
import ProductModifModal from './ProductModifModal'; // Importa el modal ProductModifModal
import Toast from 'xxx-toast-message';
import AsyncStorage from '@xxx-async-storage/async-storage';
import ipconfig from '../src/types/ipconfig';
import { Picker } from '@xxx-picker/picker';

interface EditPedidoModalProps {
  visible: boolean;
  onClose: () => void;
  pedido: any;
  detalles: any[];
  onProductSelect: (product: any, quantity: number, price: number) => void;
}

const EditPedidoModal: React.FC<EditPedidoModalProps> = ({ visible, onClose, pedido, detalles, onProductSelect }) => {
  const [editableDetalles, setEditableDetalles] = useState(detalles);
  const [total, setTotal] = useState(0);
  const [isClientModalVisible, setClientModalVisible] = useState(false);
  const [isProductModalVisible, setProductModalVisible] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState<string>('EFECTIVO');


  const [selectedClient, setSelectedClient] = useState({
    id: '',
    razon: '',
    codigo: '',
  });

  useEffect(() => {
    if (visible) {
      setEditableDetalles(detalles);
    }
  }, [visible, detalles]);

  useEffect(() => {
    const newTotal = editableDetalles.reduce((sum, item) => sum + item.cantped * item.precio, 0);
    setTotal(parseFloat(newTotal.toFixed(2)));
  }, [editableDetalles]);

  const eliminarDetalle = (index: number) => {
    const nuevosDetalles = editableDetalles.filter((_, i) => i !== index);
    setEditableDetalles(nuevosDetalles);
  };

  const handleProductSelect = (product: any, quantity: number, price: number) => {
    if (!product || quantity <= 0 || price <= 0) {
      console.error('Datos del producto seleccionados son inválidos:', product, quantity, price);
      return;
    }

    const newDetail = {
      ...product,
      cantped: quantity,
      precio: price,
    };

    setEditableDetalles((prevDetalles) => [...prevDetalles, newDetail]);
    setProductModalVisible(false);
  };

  const handleUpdatePedido = async () => {
    // Validar que los campos esenciales están presentes
    if (!pedido || !selectedClient || !selectedClient.codigo) {
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Faltan datos del pedido o cliente',
      });
      return;
    }

    const codper = await AsyncStorage.getItem('codper'); // Obtener el código del personal
    if (!codper) {
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'No se encontró el código del personal',
      });
      return;
    }

    const medio = paymentMethod; // Obtener el método de pago seleccionado

    const requestData = {
      codcli: pedido.codcli,         // Código del cliente del pedido
      total: total,                  // Total calculado
      codper,                        // Código del personal desde AsyncStorage
      importe: total,                // Importe igual al total
      medio,                         // Método de pago seleccionado
      fechped: pedido.fechped.slice(0, 10), // Fecha del pedido (formateada)
      sedarea: pedido.sedarea,       // Serie del pedido
      ordped: pedido.ordped,         // Correlativo del pedido
    };

    // Actualizar el pedido
    try {
      const response = await fetch(`http://${ipconfig.url}:3001/actpedidos`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();

      if (response.ok) {
        // Una vez actualizado el pedido, actualizar cada detalle (producto)
        await Promise.all(editableDetalles.map(async (detalle, index) => {
          const itemCode = (index + 1).toString().padStart(3, '0'); // Genera el número de item como 001, 002, etc.
          const ordpedDetail = `${pedido.fechped.slice(0, 10)}${pedido.sedarea}${pedido.ordped}`;

          const updateDetailData = {
            item: itemCode,
            codprod: detalle.codprod,
            cantped: detalle.cantped,
            precio: detalle.precio,
            descrip: detalle.descrip,
            ordped: ordpedDetail,
          };

          const detailResponse = await fetch(`http://${ipconfig.url}:3001/actdpedidos`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateDetailData),
          });

          const detailData = await detailResponse.json();

          if (!detailResponse.ok) {
            console.error(`Error al actualizar detalle del pedido: ${detailData.error}`);
            Toast.show({
              type: 'error',
              text1: 'Error al actualizar detalle',
              text2: `Producto: ${detalle.descrip}`,
            });
          }
        }));

        Toast.show({
          type: 'success',
          text1: 'Pedido actualizado',
          text2: `Correlativo: ${data.ordped}`,
        });
        onClose(); // Cerrar el modal después de la actualización
      } else {
        Toast.show({
          type: 'error',
          text1: 'Error',
          text2: data.error || 'No se pudo actualizar el pedido',
        });
      }
    } catch (error) {
      console.error(error);
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Error al actualizar el pedido',
      });
    }
  };

  return (
    <Modal visible={visible} animationType="slide" transparent={true}>
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <Text style={styles.title}>Modificar Pedido</Text>

          {/* Picker para seleccionar el método de pago */}
          <View style={styles.paymentMethodContainer}>
            <Text style={styles.label}>Método de Pago:</Text>
            <Picker
              selectedValue={paymentMethod}
              onValueChange={(itemValue) => setPaymentMethod(itemValue)}
              style={styles.picker}  // Aplica un estilo para personalizar el Picker
            >
              <Picker.Item label="EFECTIVO" value="EFECTIVO" />
              <Picker.Item label="YAPE" value="YAPE" />
              <Picker.Item label="PLIN" value="PLIN" />
              <Picker.Item label="DEPOS." value="DEPOS." />
              <Picker.Item label="TRANSF." value="TRANSF." />
            </Picker>
          </View>

          {pedido && (
            <View style={styles.pedidoInfo}>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Fecha:</Text> {pedido.fechped.slice(0, 10)}
              </Text>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Serie:</Text> {pedido.sedarea}
              </Text>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Pedido:</Text> {pedido.ordped}
              </Text>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Cliente:</Text> {pedido.codcli}
              </Text>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Cliente Seleccionado:</Text> {selectedClient.codigo || 'Ningún cliente seleccionado'}
              </Text>
              <Text style={styles.infoText}>
                <Text style={styles.label}>Total:</Text> S/ {total}
              </Text>
            </View>
          )}

          <Text style={styles.subtitle}>Detalles del Pedido:</Text>
          <FlatList
            data={editableDetalles}
            keyExtractor={(item, index) => index.toString()}
            renderItem={({ item, index }) => (
              <View style={styles.detailCard}>
                <View style={styles.detailRow}>
                  <Text style={styles.label}>
                    Producto: {item.descrip && item.descrip.trim() !== '' ? item.descrip : item.producto}
                  </Text>
                  <Text style={styles.cardText}>
                    <Text style={styles.label}>Código:</Text> {item.codprod}
                  </Text>
                </View>
                <View style={styles.detailRow}>
                  <Text style={styles.cardText}>
                    <Text style={styles.label}>Cantidad:</Text> {parseFloat(item.cantped).toFixed(2)}
                  </Text>
                  <Text style={styles.cardText}>
                    <Text style={styles.label}>Precio:</Text> S/ {parseFloat(item.precio).toFixed(2)}
                  </Text>
                </View>
                <TouchableOpacity
                  style={styles.deleteButton}
                  onPress={() => eliminarDetalle(index)}
                >
                  <Text style={styles.deleteButtonText}>Eliminar</Text>
                </TouchableOpacity>
              </View>
            )}
          />

          <View style={styles.buttonGroup}>
            <TouchableOpacity
              style={styles.addButton}
              onPress={() => setClientModalVisible(true)}
            >
              <Text style={styles.actionButtonText}>Modificar Cliente</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.addButton}
              onPress={() => setProductModalVisible(true)}
            >
              <Text style={styles.actionButtonText}>Agregar Producto</Text>
            </TouchableOpacity>
          </View>

          {/* Botón Actualizar Pedido */}
          <TouchableOpacity style={styles.closeButton} onPress={handleUpdatePedido}>
            <Text style={styles.closeButtonText}>Actualizar Pedido</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>Cerrar</Text>
          </TouchableOpacity>
        </View>
      </View>

      <ClientSelectModal
        visible={isClientModalVisible}
        onSelectClient={(client) => {
          setSelectedClient(client);
          setClientModalVisible(false);
        }}
        onClose={() => setClientModalVisible(false)}
      />
      <ProductModifModal
        visible={isProductModalVisible}
        onProductSelect={handleProductSelect}
        onClose={() => setProductModalVisible(false)}
      />
    </Modal>
  );
};

export default EditPedidoModal;














import { StyleSheet } from 'xxx';

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    padding: 20,
    borderRadius: 10,
    width: '90%',
    maxHeight: '80%',
    elevation: 5,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
    textAlign: 'center',
    color: 'white',
  },
  pedidoInfo: {
    marginBottom: 20,
    padding: 10,
    backgroundColor: '#f9f9f9',
    borderRadius: 10,
  },
  infoText: {
    fontSize: 10,
    marginVertical: 3,
  },
  label: {
    fontWeight: 'bold',
    fontSize: 10,
    color: '#333',
  },
  subtitle: {
    fontSize: 12,
    fontWeight: 'bold',
    marginBottom: 10,
    color: 'white',
  },
  detailCard: {
    backgroundColor: '#f1f1f1',
    borderRadius: 10,
    padding: 10,
    marginBottom: 15,
    elevation: 2,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
  },
  cardText: {
    fontSize: 10,
    color: '#555',
  },
  deleteButton: {
    marginTop: 10,
    alignSelf: 'flex-end',
    paddingVertical: 5,
    paddingHorizontal: 15,
    backgroundColor: 'red',
    borderRadius: 5,
  },
  deleteButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 10,
  },
  buttonGroup: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  actionButton: {
    flex: 1,
    marginHorizontal: 5,
    padding: 10,
    backgroundColor: '#8CBF2F',
    borderRadius: 5,
    alignItems: 'center',
  },
  addButton: {
    flex: 1,
    marginHorizontal: 5,
    padding: 10,
    backgroundColor: '#FFD700',
    borderRadius: 5,
    alignItems: 'center',
  },
  
  actionButtonText: {
    color: 'black',
    fontWeight: 'bold',
    fontSize: 10,
  },
  closeButton: {
    marginTop: 20,
    padding: 15,
    backgroundColor: '#8CBF2F',
    borderRadius: 5,
    alignItems: 'center',
  },
  closeButtonText: {
    color: 'black',
    fontWeight: 'bold',
    fontSize: 14,
  },
  paymentMethodContainer: {
    marginVertical: 10,
  },
  picker: {
    height: 50,
    width: '100%',
    backgroundColor: '#f0f0f0', // Puedes personalizarlo como quieras
    borderRadius: 5,
  },
  
});

export default styles;
