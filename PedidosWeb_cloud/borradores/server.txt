const express = require('express');
const mysql = require('mysql2/promise'); // Cambiar a la versión basada en promesas
const bodyParser = require('body-parser');
const cors = require('cors');

// Configurar la app de Express
const app = express();
const port = 3001;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Conexión a la base de datos MySQL
const dbConfig = {
  //host: '192.168.0.5',
  //user: 'remoto',
  //password: 'remoto12345',
  //database: 'gastek',
  //port: 3306,
  host: '192.168.0.6',
  user: 'remoto',
  password: 'remoto12345',
  database: 'gastek',
  port: 3306,
};

// Función para obtener la conexión a la base de datos
const getDbConnection = async () => {
  return mysql.createConnection(dbConfig);
};

// Ruta para obtener el último correlativo
app.get('/correlativo', async (req, res) => {
  const { serie } = req.query;
  if (!serie) {
    return res.status(400).json({ error: 'La serie es requerida' });
  }
  try {
    const connection = await getDbConnection();
    const [results] = await connection.query('SELECT MAX(CAST(ordped AS UNSIGNED)) AS max_ordped FROM pedidos WHERE sedarea = ?', [serie]);
    const lastCorrelativo = results[0]?.max_ordped || 0; // Cambia a 0 si no existe
    let nuevoCorrelativo = (lastCorrelativo + 1).toString().padStart(6, '0');
    res.status(200).json({ correlativo: nuevoCorrelativo });
  } catch (err) {
    console.error('Error al obtener el correlativo:', err);
    res.status(500).json({ error: 'Error al obtener el correlativo' });
  }
});

app.get('/codbarra', async (req, res) => {
  const { codigo } = req.query;

  if (!codigo) {
      return res.status(400).json({ error: 'El código de barra es requerido' });
  }

  try {
      const connection = await getDbConnection();
      const [results] = await connection.query(
          'SELECT codprod, producto FROM productos WHERE parnumb = ?',
          [codigo]
      );

      if (results.length > 0) {
          res.json(results[0]); // Envía el primer resultado si se encuentra
      } else {
          res.status(404).json({ error: 'Código no existe' });
      }

      await connection.end();
  } catch (err) {
      console.error('Error en la consulta:', err);
      res.status(500).json({ error: 'Error en el servidor' });
  }
});


// Ruta para obtener clientes
app.get('/clientes', async (req, res) => {
  const query = 'SELECT nruc, nomcli, codcli FROM clientes';
  try {
    const connection = await getDbConnection();
    console.log('Ejecutando consulta:', query);
    const [results] = await connection.query(query);
    console.log('Resultados de la consulta:', results);
    res.json(results);
    await connection.end();
  } catch (error) {
    console.error('Error al obtener clientes:', error);
    res.status(500).send('Error al obtener clientes');
  }
});

// Ruta para obtener productos
app.get('/productos', async (req, res) => {
  try {
    const connection = await getDbConnection();
    const [results] = await connection.query('SELECT codprod, producto FROM productos');
    console.log('Resultados de la consulta:', results); // Esto debería mostrar los datos en consola
    res.status(200).json(results);
  } catch (err) {
    console.error('Error al obtener productos:', err);
    res.status(500).json({ error: 'Error al obtener productos' });
  }
});


// Función para verificar si el correlativo existe en la base de datos
const checkCorrelativoExistence = async (serie, correlativo) => {
  const connection = await getDbConnection();
  const query = 'SELECT COUNT(*) AS count_exists FROM pedidos WHERE sedarea = ? AND ordped = ?';
  const [rows] = await connection.execute(query, [serie, correlativo]);
  await connection.end();
  return rows[0].count_exists > 0; // Devuelve true si existe el correlativo
};


app.post('/pedidos', async (req, res) => {
  const { fechped, fechoc, fechentr, sedarea, ordped, codcli, total, importe, obs } = req.body;
  if (!fechped || !fechoc || !fechentr || !sedarea || !ordped || !codcli || !total || !importe) {
    return res.status(400).json({ error: 'Todos los campos son obligatorios' });
  }
  
  try {
    // Verificar si el correlativo ya existe
    let correlativoActual = ordped; // El correlativo pasado desde el frontend
    let exists = await checkCorrelativoExistence(sedarea, correlativoActual);

    // Si el correlativo ya existe, incrementar el correlativo y verificar de nuevo
    while (exists) {
      correlativoActual = (parseInt(correlativoActual) + 1).toString().padStart(3, '0'); // Incrementar el correlativo
      exists = await checkCorrelativoExistence(sedarea, correlativoActual); // Verificar si el nuevo correlativo existe
    }

    // Guardar el pedido con el correlativo actualizado
    const connection = await getDbConnection();
    const query = 'INSERT INTO pedidos (fechped, fechoc, fechentr, sedarea, ordped, codcli, total, importe, observ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
    const [result] = await connection.execute(query, [fechped, fechoc, fechentr, sedarea, correlativoActual, codcli, total, importe, obs]);
    await connection.end();

    res.status(201).json({ message: 'Pedido guardado exitosamente', id: result.insertId, ordped: correlativoActual });
  } catch (err) {
    console.error('Error al guardar el pedido:', err);
    res.status(500).json({ error: 'Error al guardar el pedido' });
  }
});


app.post('/dpedidos', async (req, res) => {
  const { ordped, item, codprod, cantped, precio, descrip } = req.body;
  if (!ordped || !item || !codprod || !cantped || !precio || !descrip) {
    return res.status(400).json({ error: 'Todos los campos son requeridos' });
  }
  try {
    const connection = await getDbConnection();
    const query = 'INSERT INTO dpedidos (ordped, item, codprod, cantped, precio, descrip) VALUES (?, ?, ?, ?, ?, ?)';
    const values = [ordped, item, codprod, cantped, precio, descrip];
    await connection.query(query, values);
    console.log('Pedido insertado con éxito');
    res.status(201).json({ message: 'Pedido insertado con éxito' });
    await connection.end();
  } catch (error) {
    console.error('Error al insertar pedido:', error);
    res.status(500).json({ error: 'Error al insertar el pedido' });
  }
});

// Ruta para obtener reportes por fecha
app.post('/reportes', async (req, res) => {
  const { fechaInicio, fechaFin } = req.body;

  if (!fechaInicio || !fechaFin) {
    return res.status(400).json({ error: 'Las fechas de inicio y fin son requeridas' });
  }

  try {
    const connection = await getDbConnection();
    const query = 'SELECT fechped, sedarea, ordped, codcli, total FROM gastek.pedidos WHERE fechped BETWEEN ? AND ?';
    const [results] = await connection.query(query, [fechaInicio, fechaFin]);

    res.json(results);
    await connection.end();
  } catch (err) {
    console.error('Error en la consulta de reportes:', err);
    res.status(500).json({ error: 'Error en el servidor' });
  }
});

app.get('/dreportes', async (req, res) => {
  const { dpedido } = req.query;

  if (!dpedido) {
    return res.status(400).json({ error: 'El parámetro es requerido' });
  }

  try {
    const connection = await getDbConnection();
    const query = `
      SELECT item, codprod, descrip, cantped, precio, medida 
      FROM dpedidos 
      WHERE ordped = ?`;

    const [results] = await connection.query(query, [dpedido]);
    
    if (results.length > 0) {
      res.json(results); // Enviar los resultados de la consulta
    } else {
      res.status(404).json({ error: 'No se encontraron detalles del pedido' });
    }

    await connection.end();
  } catch (err) {
    console.error('Error en la consulta de detalles de pedido:', err); // Agregar más detalles del error
    res.status(500).json({ error: 'Error en el servidor' });
  }
});

// Ruta para actualizar el campo parnumb en productos
app.put('/productos/:codprod', async (req, res) => {
  const { codprod } = req.params; // Obtener codprod de los parámetros de la URL
  const { parnumb } = req.body; // Obtener parnumb del cuerpo de la solicitud
  if (!parnumb) {
    return res.status(400).json({ error: 'El campo parnumb es requerido' });
  }
  try {
    const connection = await getDbConnection();
    const query = 'UPDATE gastek.productos SET parnumb = ? WHERE codprod = ?';
    await connection.execute(query, [parnumb, codprod]);
    res.status(200).json({ message: 'Producto actualizado exitosamente' });
    await connection.end();
  } catch (error) {
    console.error('Error al actualizar producto:', error);
    res.status(500).json({ error: 'Error al actualizar producto' });
  }
});

app.post('/clientes', async (req, res) => {
  const { codcli } = req.body;
  if (!codcli) {
    return res.status(400).json({ error: 'El código de cliente (codcli) es requerido' });
  }

  try {
    const connection = await getDbConnection();
    const [results] = await connection.query(
      'SELECT nruc, nomcli FROM clientes WHERE codcli = ?', 
      [codcli]
    );

    if (results.length > 0) {
      res.json(results[0]); // Devuelve los datos del cliente
    } else {
      res.status(404).json({ error: 'Cliente no encontrado' });
    }
    await connection.end();
  } catch (error) {
    console.error('Error en la consulta:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// Iniciar el servidor
app.listen(3001, '0.0.0.0', () => {
  console.log(`db: ${dbConfig.database},${dbConfig.host},${dbConfig.password},${dbConfig.port}`)
  console.log(`Servidor backend corriendo en el puerto ${port}`);
});
