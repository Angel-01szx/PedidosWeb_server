import React, { useState } from 'react';
import { View, Text, Alert, FlatList, TextInput, TouchableOpacity } from 'xxx';
import { Calendar } from 'xxx-calendars';
import styles from './ReportsScreen.styles';
import Toast from 'xxx-toast-message';
import ipconfig from '../src/types/ipconfig';
import DetailsPedidoModal from './DetailsPedidoModal';
import Icon from 'xxx-vector-icons/FontAwesome'; // Importar iconos

interface Reporte {
  fechped: string;
  sedarea: string;
  ordped: number;
  codcli: string;
  total: string;
}

export default function ReportsScreen() {
  const [fechaInicio, setFechaInicio] = useState<string>(new Date().toISOString().split('T')[0]);
  const [fechaFin, setFechaFin] = useState<string>(new Date().toISOString().split('T')[0]);
  const [showInicio, setShowInicio] = useState(false);
  const [showFin, setShowFin] = useState(false);
  const [reportes, setReportes] = useState<Reporte[]>([]);
  const [codcliSeleccionado, setCodcliSeleccionado] = useState<string>('');
  const [fechSelected, setFechSelected] = useState<string>('');
  const [serieSelected, setSerieSelected] = useState<string>('');
  const [ordpedSelected, setOrdSelected] = useState<string>('');
  const [clienteData, setClienteData] = useState<{ nomcli: string; nruc: string }>({ nomcli: '', nruc: '' });
  const [modalVisible, setModalVisible] = useState(false);
  const [detallePedido, setDetallePedido] = useState<any[]>([]);

  const handleConsulta = async () => {
    try {
      const response = await fetch(`http://${ipconfig.url}:3001/reportes`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fechaInicio, fechaFin }),
      });
      if (!response.ok) throw new Error('Error en la consulta');
      const data = await response.json();
      setReportes(data);
      Toast.show({
        type: 'success',
        text1: 'Consulta exitosa',
        text2: 'Datos recibidos correctamente.',
        position: 'top',
      });
    } catch (error) {
      console.error('Error en la consulta:', error);
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Ocurrió un error al consultar los reportes.',
        position: 'top',
      });
    }
  };

  const handleConsultaCliente = async (codcli: string) => {
    try {
      const response = await fetch(`http://${ipconfig.url}:3001/clientes`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ codcli }),
      });
      if (!response.ok) throw new Error('Error al obtener el cliente');
      const data = await response.json();
      if (data && data.nomcli && data.nruc) {
        setClienteData({ nomcli: data.nomcli, nruc: data.nruc });
      } else {
        Toast.show({
          type: 'info',
          text1: 'Cliente no encontrado',
          text2: 'No se encontró el cliente con ese código.',
          position: 'top',
        });
      }
    } catch (error) {
      console.error('Error al consultar cliente:', error);
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Ocurrió un error al obtener los datos del cliente.',
        position: 'top',
      });
    }
  };

  const onSelectFechaInicio = (date: string) => {
    setShowInicio(false);
    setFechaInicio(date);
    const fechaFinRestada = new Date(date);
    fechaFinRestada.setDate(fechaFinRestada.getDate() + 1);
    setFechaFin(fechaFinRestada.toISOString().split('T')[0]);
  };

  const onSelectFechaFin = (date: string) => {
    setShowFin(false);
    setFechaFin(date);
  };

  const handleFilaSeleccionada = (codcli: string, ordped: number, sedarea: string, fecha: string) => {
    setCodcliSeleccionado(codcli);
    handleConsultaCliente(codcli);
    setFechSelected(fecha.substring(0,10));
    setSerieSelected(sedarea);
    setOrdSelected(ordped.toString());

    const dpedido = `${fechaInicio.split('-')[0]}${sedarea}${ordped}`;

    console.log(`Dpedido enviado: ${dpedido}`);
    fetch(`http://${ipconfig.url}:3001/dreportes?dpedido=${dpedido}`)
      .then(response => response.json())
      .then(data => {
        setDetallePedido(data);
        setModalVisible(true);
      })
      .catch(error => {
        console.error('Error al obtener los detalles del pedido:', error);
        Toast.show({
          type: 'error',
          text1: 'Error',
          text2: 'No se pudieron obtener los detalles del pedido.',
          position: 'top',
        });
      });
  };

  const handleEdit = (ordped: number) => {
    console.log('Editar pedido:', ordped);
    // Aquí puedes agregar la lógica para editar el pedido
  };

  const handleDelete = (ordped: number) => {
    Alert.alert(
      'Eliminar Pedido',
      `¿Estás seguro de que deseas eliminar el pedido ${ordped}?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        { text: 'Eliminar', onPress: () => {
            console.log('Eliminar pedido:', ordped);
            // Aquí puedes agregar la lógica para eliminar el pedido
        }},
      ]
    );
  };

  return (
    <View style={styles.container}>
      <Text>Pantalla de Reportes</Text>

      <TouchableOpacity style={styles.button} onPress={() => setShowInicio(true)}>
        <Text style={styles.buttonText}>Seleccionar Fecha de Inicio</Text>
      </TouchableOpacity>

      {showInicio && (
        <Calendar
          current={fechaInicio}
          onDayPress={(day: { dateString: string }) => onSelectFechaInicio(day.dateString)}
          markedDates={{ [fechaInicio]: { selected: true, selectedColor: 'blue' } }}
        />
      )}

      <TextInput style={styles.input} value={fechaInicio} editable={false} />

      <TouchableOpacity style={styles.button} onPress={() => setShowFin(true)}>
        <Text style={styles.buttonText}>Seleccionar Fecha de Fin</Text>
      </TouchableOpacity>

      {showFin && (
        <Calendar
          current={fechaFin}
          onDayPress={(day: { dateString: string }) => onSelectFechaFin(day.dateString)}
          markedDates={{ [fechaFin]: { selected: true, selectedColor: 'blue' } }}
        />
      )}

      <TextInput style={styles.input} value={fechaFin} editable={false} />

      <TouchableOpacity style={styles.button} onPress={handleConsulta}>
        <Text style={styles.buttonText}>Consultar Reportes</Text>
      </TouchableOpacity>

      <FlatList
        data={reportes}
        keyExtractor={(item) => item.ordped.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => handleFilaSeleccionada(item.codcli, item.ordped, item.sedarea, item.fechped)}>
            <View style={styles.row}>
              <Text style={styles.cell}>{item.fechped.slice(0,10)}</Text>
              <Text style={styles.cell}>{item.sedarea}</Text>
              <Text style={styles.cell}>{item.ordped}</Text>
              <Text style={styles.cell}>{item.codcli}</Text>
              <Text style={styles.cell}>{item.total}</Text>

              {/* Botones de Editar y Eliminar */}
              <View style={styles.buttonsContainer}>
                <TouchableOpacity onPress={() => handleEdit(item.ordped)}>
                  <Icon name="edit" size={20} color="blue" />
                </TouchableOpacity>
                <TouchableOpacity onPress={() => handleDelete(item.ordped)}>
                  <Icon name="trash" size={20} color="red" />
                </TouchableOpacity>
              </View>
            </View>
          </TouchableOpacity>
        )}
      />

      <DetailsPedidoModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        detalles={detallePedido}
        cliente={clienteData}
        fecha={fechSelected}
        serie={serieSelected}
        pedido={ordpedSelected}
      />
    </View>
  );
}
















import { StyleSheet } from 'xxx';

export default StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    backgroundColor: '#e6f4db',
  },
  button: {
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 5,
    alignItems: 'center',
    backgroundColor: '#8CBF2F',
    marginBottom: 10,
  },
  buttonText: {
    color: 'black',
    fontSize: 10,
    fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 20,
    height: 40,
    fontSize: 10,
    backgroundColor: 'white',
  },
  tableHeader: {
    flexDirection: 'row',
    paddingVertical: 12,
    backgroundColor: '#E0E0E0',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#ccc',
  },
  headerCell: {
    flex: 1,
    fontWeight: 'bold',
    textAlign: 'center',
    fontSize: 10,
  },
  row: {
    flexDirection: 'row',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderColor: '#ccc',
  },
  cell: {
    flex: 1,
    textAlign: 'center',
    fontSize: 10,
  },
  clientInfo: {
    marginTop: 20,
    padding: 16,
    backgroundColor: '#F8F8F8',
    borderRadius: 8,
    borderColor: '#ddd',
    borderWidth: 1,
  },
  buttonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingLeft: 10,
    paddingRight: 10,
    paddingVertical: 5,
    width: 80, // Ajusta el ancho según lo necesites
  },
});
