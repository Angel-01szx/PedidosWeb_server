import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Modal,
  FlatList,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'xxx';
import { BarCodeScanner } from 'expo-barcode-scanner';
import styles from './ProductSelectModal.styles';
import Toast from 'xxx-toast-message';
import ipconfig from '../src/types/ipconfig';
import Icon from 'xxx-vector-icons/MaterialIcons';

interface Product {
  codprod: string;
  name: string;
  quantity: string;
  producto?: string;
  precio: string;
  pventa?: string;
}

interface ProductSelectModalProps {
  visible: boolean;
  selectedProduct: Product | null;
  setSelectedProduct: (product: Product | null) => void;
  quantity: string;
  setQuantity: (quantity: string) => void;
  precio: string;
  setPrecio: (precio: string) => void;
  isEditMode: boolean;
  handleAddOrModifyProduct: (product: Product) => void;
  onClose: () => void;
  products: Product[];
}

const ProductSelectModal: React.FC<ProductSelectModalProps> = ({
  visible,
  selectedProduct,
  setSelectedProduct,
  quantity,
  setQuantity,
  precio,
  setPrecio,
  isEditMode,
  handleAddOrModifyProduct,
  onClose,
  products,
}) => {
  const [searchText, setSearchText] = useState('');
  const [scanning, setScanning] = useState(false);
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [productos, setProductos] = useState<Product[]>(products);


  const filteredProducts = productos.filter(product =>
    product.producto?.toLowerCase().includes(searchText.toLowerCase())
  );



  // Fetch the products from the API when the modal is visible
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await fetch(`http://${ipconfig.url}/productos`);
        if (!response.ok) {
          throw new Error('Error fetching products');
        }
        const data = await response.json();
        setProductos(data);  // Actualizar productos con los datos de la API
      } catch (error) {
        console.error('Error fetching products:', error);
        Toast.show({
          type: 'error',
          text1: 'Error',
          text2: 'No se pudieron cargar los productos.',
          position: 'top',
        });
      }
    };

    if (visible) {
      fetchProducts();
    }
  }, [visible]);

  useEffect(() => {
    // Cuando se selecciona un producto, actualiza automáticamente el precio en el input
    if (selectedProduct?.pventa && parseFloat(selectedProduct?.pventa) > 0) {
      setPrecio(selectedProduct.pventa);
    } else {
      setPrecio('');
    }

  }, [selectedProduct]);

  useEffect(() => {
    const getPermissions = async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    };
    getPermissions();
  }, []);

  const startScanning = () => setScanning(true);
  const stopScanning = () => setScanning(false);

   const fetchProducts = async () => {
      try {
        const response = await fetch(`http://${ipconfig.url}/productos`);
        if (!response.ok) {
          throw new Error('Error fetching products');
        }
        const data = await response.json();
        setProductos(data);  // Actualizar productos con los datos de la API
      } catch (error) {
        console.error('Error fetching products:', error);
        Toast.show({
          type: 'error',
          text1: 'Error',
          text2: 'No se pudieron cargar los productos.',
          position: 'top',
        });
      }
    };

  const handleBarCodeScanned = async ({ data }: { data: string }) => {
    console.log("Código de barras escaneado:", data);

    try {
      const response = await fetch(`http://${ipconfig.url}/codbarra?codigo=${data}`);
      const contentType = response.headers.get("content-type");

      if (!response.ok) {
        Toast.show({
          type: 'success',
          text1: 'Producto',
          text2: 'Código no existe.',
          position: 'top',
        });
        return;
      } else if (contentType && contentType.includes("application/json")) {
        const result = await response.json();
        const foundProduct = result; // Cambiar a result[0] si el servidor devuelve un objeto único
        if (foundProduct) {
          setSelectedProduct({ ...foundProduct, quantity: '', precio: '' });
          setQuantity('');
          setPrecio('');
          stopScanning(); // Detiene el escaneo
        } else {
          Toast.show({
            type: 'success',
            text1: 'Código no existe',
            text2: 'El código de barras escaneado no se encuentra en la base de datos.',
            position: 'top',
          });
        }
      } else {
        Toast.show({
          type: 'success',
          text1: 'Error',
          text2: 'La respuesta no es un JSON válido.',
          position: 'top',
        });
      }
    } catch (error) {
      console.error("Error al buscar el producto:", error);
      Toast.show({
        type: 'success',
        text1: 'Error',
        text2: 'Hubo un problema al escanear el código.',
        position: 'top',
      });
    }
  };

  return (
    <Modal visible={visible} transparent={false} animationType="slide">
      <View style={[styles.modalContainer, { padding: 20 }]}>

        {scanning ? (
          <View style={styles.cameraContainer}>
            {hasPermission === null ? (
              <Text>Solicitando permisos para la cámara...</Text>
            ) : hasPermission === false ? (
              <Text>No tienes acceso a la cámara</Text>
            ) : (
              <BarCodeScanner
                onBarCodeScanned={handleBarCodeScanned}
                style={styles.camera}
              />
            )}
            <TouchableOpacity style={styles.closeButton} onPress={stopScanning}>
              <Text style={styles.buttonText}>Cerrar Escáner</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <>
            <Text style={styles.modalTitle}>
              {isEditMode ? 'Modificar Producto' : 'Selecciona un Producto'}
            </Text>

            <TextInput
              style={styles.input}
              placeholder="Buscar por Descripción"
              value={searchText}
              onChangeText={setSearchText}
            />

            <TouchableOpacity style={styles.button} onPress={startScanning}>
              <Text style={styles.buttonText}>Escanear Código de Barra</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.updateButton} onPress={fetchProducts}>
              <Icon name="refresh" size={24} color="#fff" />
            </TouchableOpacity>

            <View style={[styles.tableContainer, { flex: 1, maxHeight: 250 }]}>
              <FlatList
                data={filteredProducts} // Filtrado de productos basado en searchText
                renderItem={({ item }) => {
                  const isSelected = selectedProduct?.codprod === item.codprod;
                  return (
                    <TouchableOpacity onPress={() => {
                      setSelectedProduct({ ...item, quantity: '' });
                      setQuantity('');
                      setPrecio('');
                    }}>
                      <View style={[styles.tableRow, isSelected ? styles.selectedRow : null]}>
                        <Text style={styles.idColumn}>{item.codprod}</Text>
                        <Text style={styles.descripcionColumn}>
                          {item.producto || 'Descripción no disponible'}
                        </Text>
                        <Text style={styles.pventaColumn}>{item.pventa}</Text>
                      </View>
                    </TouchableOpacity>
                  );
                }}
                keyExtractor={(item) => item.codprod}
                showsVerticalScrollIndicator={true}
              />
            </View>

            {selectedProduct && (
              <View>
                <Text style={styles.selectedDescription}>
                  Descripción Seleccionada: {selectedProduct.producto || 'No hay descripción disponible'}
                </Text>
                <Text style={styles.selectedDescription}>
                  Precio de Venta: {selectedProduct.pventa || 'No disponible'}
                </Text>
              </View>
            )}

            <TextInput
              style={styles.input}
              placeholder="Cantidad"
              value={quantity}
              keyboardType="numeric"
              onChangeText={setQuantity}
            />

            <TextInput
              style={styles.input}
              placeholder="Precio"
              value={precio}
              keyboardType="numeric"
              onChangeText={setPrecio}
            />

            <TouchableOpacity
              style={styles.button}
              onPress={() => {
                if (selectedProduct) {
                  const productToAdd = {
                    ...selectedProduct,
                    setQuantity,
                    descripcion: selectedProduct.producto || ''
                  };
                  handleAddOrModifyProduct(productToAdd);
                }
              }}
            >
              <Text style={styles.buttonText}>{isEditMode ? 'Modificar' : 'Agregar'}</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.button} onPress={onClose}>
              <Text style={styles.buttonText}>Cerrar</Text>
            </TouchableOpacity>
          </>
        )}
      </View>
    </Modal>
  );
};

export default ProductSelectModal;
